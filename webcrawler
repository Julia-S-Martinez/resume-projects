#!/usr/bin/env python3

from html.parser import HTMLParser
import socket, argparse

#######################  GLOBAL VARIABLES  ##########################
cookie = ""
header = ""

target = "www.3700.network"
get = "GET %s HTTP/1.1\r\nHost: www.3700.network\r\nConnection: close\r\n\r\n"

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((target, 80))

parser = argparse.ArgumentParser(description = "Login")
parser.add_argument("username")
parser.add_argument("password")
args = parser.parse_args()
token = ""
session = ""
loc = ""
flag_count = 0
seen_links = {}

#######################  HTML PARSER  ##########################

class MyHTMLParser(HTMLParser):
    #Looks for new links to search
    def handle_starttag(self, tag, attrs):
        global seen_links
        if tag == "a":
            for name, value in attrs:
                if name == "href" and not (value in seen_links):
                    seen_links[value] = False 

    #Looks for flags in the data in html
    def handle_data(self, data):
        global flag_count
        if data.startswith("FLAG:"): 
            print(data)
            flag_count += 1

html_parser = MyHTMLParser()


#######################  PARSE HEADER HELPERS  ##########################
def findToken(recv_):
    global token
    token = recv_.decode().split("csrftoken=")[1].split(";")[0]

def findSession(recv_):
    global session
    session = recv_.decode().split("sessionid=")[1].split(";")[0]

def findLocation(recv_):
    global loc
    loc = recv_.decode().split("Location: ")[1].split("\r\n")[0]


#######################  INITAL GET  ##########################
sock.send(bytes((get % "/accounts/login/?next=/fakebook/"), "ascii"))
recv_msg = sock.recv(2048)
sock.close()

findToken(recv_msg)
findSession(recv_msg)

## START THE POST
init_post_body = "username=%s&password=%s&csrfmiddlewaretoken=%s&next=\r\n" % (args.username, args.password, token)

init_post_header = "POST /accounts/login/ HTTP/1.1\r\nHost: www.3700.network\r\nConnection: close\r\n Content-Type: application/x-www-form-urlencoded\r\nContent-Length: %d\r\nCookie: csrftoken=%s; sessionid=%s\r\n\r\n" % (len(init_post_body), token, session)

post_msg = init_post_header + init_post_body 

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((target, 80))
sock.send(bytes(post_msg, "ascii"))

loggedin_recv = sock.recv(2048)

findSession(loggedin_recv)
findLocation(loggedin_recv)
sock.close()

#Get after post

login_get = "GET /fakebook/ HTTP/1.1\r\nHost: www.3700.network\r\nConnection: close\r\nCookie: csrftoken=%s sessionid= %s\r\n\r\n" % (token, session)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((target, 80))
sock.send(bytes(login_get, 'ascii'))

while True:
    recv_ = sock.recv(2048)
    if recv_:
        html_parser.feed(recv_.decode())
    else:
       sock.close()
       break


#######################  CRAWLING LOOP  ##########################

get_with_cookie = "GET %s HTTP/1.1\r\nHost: www.3700.network\r\nConnection: close\r\n" + "Cookie: csrftoken=" + token +"; sessionid=" + session + "\r\n\r\n"

while(flag_count < 5):
           
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target, 80))
    unchecked = (list(filter(lambda checked: seen_links[checked] == False, seen_links.keys())))
 
    for current_link in unchecked:
        if flag_count == 5:
            break
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target, 80))
        sock.send(bytes((get_with_cookie % current_link), "ascii"))

        try:
            recv_ = sock.recv(2048)

            while recv_:
                if recv_:
                    html_parser.feed(recv_.decode())
                    recv_ = sock.recv(2048)
                else:
                    sock.close()
                    break
            seen_links[current_link] = True
            
        except:
            print("recieving error")
